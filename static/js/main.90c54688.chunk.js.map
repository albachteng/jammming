{"version":3,"sources":["util/Spotify.js","components/track/Track.js","components/tracklist/TrackList.js","components/searchresults/SearchResults.js","components/searchbar/SearchBar.js","components/playlist/Playlist.js","components/app/App.js","reportWebVitals.js","index.js"],"names":["token","Track","props","addTrack","bind","removeTrack","this","onAdd","track","onRemove","isRemoval","className","onClick","name","artist","album","renderAction","React","Component","TrackList","tracks","map","console","log","id","SearchResults","searchResults","SearchBar","state","term","search","handleTermChange","onSearch","event","setState","target","value","placeholder","onChange","Playlist","handleNameChange","e","onNameChange","defaultValue","playlistTracks","onSave","redirect","Spotify","getAccessToken","tokenMatch","window","location","href","match","expirationMatch","expiration","Number","setTimeout","history","pushState","accessToken","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlaylist","uris","length","userID","method","body","JSON","stringify","playlistID","App","playlistName","updatePlaylistName","find","savedTrack","playlist","concat","index","findIndex","song","splice","trackUris","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.90c54688.chunk.js","sourcesContent":["let token;\nconst clientID = '9ae636298e864b1fb0a20f48ad0e4613'; \nconst uri = \"http://tangy-orange.surge.sh/\";\nconst redirect = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${uri}`\n\nconst Spotify = {\n    getAccessToken() {\n        if (token) {\n            return token;\n        }  // if there's already a token, use it\n        \n        const tokenMatch = window.location.href.match(/access_token=([^&]*)/);\n        const expirationMatch = window.location.href.match(/expires_in=([^&]*)/);\n        // if not, we're going to check the url for an embedded token and expiration\n\n        if (tokenMatch && expirationMatch) {\n            token = tokenMatch[1]; // NTS the match function returns an array\n            const expiration = Number(expirationMatch[1]);\n            // clear parameters and allow us to access a new token\n            window.setTimeout(() => token = '', expiration * 1000);\n            window.history.pushState('Access Token', null, '/'); \n        } else {\n                window.location.href = redirect; \n            }\n        },\n\n    search(term) {\n        const accessToken = Spotify.getAccessToken();\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, { \n            headers: {\n                Authorization: `Bearer ${accessToken}`,\n            }}).then(response => {\n                return response.json();\n            }).then(jsonResponse => {\n                if (!jsonResponse.tracks) {\n                    return [];\n                } \n                    return jsonResponse.tracks.items.map(track => ({\n                        id: track.id,\n                        name: track.name,\n                        artist: track.artists[0].name,\n                        album: track.album.name,\n                        uri: track.uri,\n                    }));\n            });\n        },\n    savePlaylist(name, uris) {\n        if (!name || !uris.length) {\n            return;\n        }\n\n        const accessToken = Spotify.getAccessToken();\n        const headers = { Authorization: `Bearer ${accessToken}`};\n        let userID;\n\n        return fetch('https://api.spotify.com/v1/me', {\n            headers: headers,\n        }).then(response => response.json()\n        ).then(jsonResponse => {\n            userID = jsonResponse.id;\n            return fetch(`https://api.spotify.com/v1/users/${userID}/playlists`, {   \n                headers: headers,\n                method: 'POST', \n                body: JSON.stringify({name: name})\n            }).then(response => response.json()\n            ).then(jsonResponse => {\n                const playlistID = jsonResponse.id;\n                return fetch(`https://api.spotify.com/v1/users/${userID}/playlists/${playlistID}/tracks`, {\n                    headers: headers,\n                    method: 'POST', \n                    body: JSON.stringify({uris: uris})})\n            });\n        });\n    },\n}\nexport default Spotify;","import React from 'react';\nimport './Track.css';\n\nexport class Track extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.addTrack = this.addTrack.bind(this);\n        this.removeTrack = this.removeTrack.bind(this);\n    }\n\n    addTrack() {\n        this.props.onAdd(this.props.track);\n    }\n\n    removeTrack() {\n        this.props.onRemove(this.props.track);\n    }\n\n    renderAction() { //@ts-ignore\n        if (this.props.isRemoval) {\n            return (<button \n                    className=\"Track-action\"\n                    onClick={this.removeTrack}\n                    >\n                        -\n                    </button>);\n        } else {\n            return (<button \n                    className=\"Track-action\"\n                    onClick={this.addTrack}\n                    >\n                        +\n                    </button>);\n        }}\n\n    render() {\n        return (\n            <div className=\"Track\">\n                <div className=\"Track-information\">\n                    <h3>{this.props.track.name}</h3>\n                    <p>{this.props.track.artist} | {this.props.track.album}</p>\n                </div>\n                {this.renderAction()}\n            </div>\n        )\n    }\n}","import React from 'react';\n//@ts-ignore\nimport {Track} from '../track/Track.js';\nimport './TrackList.css';\n\nexport class TrackList extends React.Component {\n    render() {\n        return (\n            <div className=\"TrackList\">\n                {\n                this.props.tracks.map(track => {\n                    console.log(typeof this.props.tracks);\n                    return <Track \n                        track={track} \n                        key={track.id} \n                        onAdd={this.props.onAdd}\n                        onRemove={this.props.onRemove}\n                        isRemoval={this.props.isRemoval}/>\n                })}\n            </div>\n        )\n    }\n}","import React from 'react';\nimport './SearchResults.css';\n//@ts-ignore\nimport { TrackList } from '../tracklist/TrackList.js';\n\nexport class SearchResults extends React.Component {\n    render() {\n        return (\n            <div className=\"SearchResults\">\n                <h2>Results</h2>\n                <TrackList \n                    tracks={[...this.props.searchResults]}\n                    onAdd={this.props.onAdd}\n                    isRemoval={false}\n                />\n            </div>\n        )\n    }\n}","import './SearchBar.css';\nimport React from 'react';\n\nexport class SearchBar extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            term: '',\n        }\n        this.search = this.search.bind(this);\n        this.handleTermChange = this.handleTermChange.bind(this);\n    }\n\n    search() {\n        this.props.onSearch(this.state.term); \n    }\n\n    handleTermChange(event) {\n        this.setState({term: event.target.value});\n    }\n\n    render() {\n        return (\n            <div className=\"SearchBar\">\n                <input \n                    placeholder=\"Enter A Song, Album, or Artist\" \n                    onChange={this.handleTermChange}\n                />\n                <button className=\"SearchButton\" onClick={this.search}>SEARCH</button>\n            </div>\n        )\n    }\n}","import React from 'react';\n//@ts-ignore\nimport { TrackList } from '../tracklist/TrackList.js';\nimport './Playlist.css';\n\nexport class Playlist extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.handleNameChange = this.handleNameChange.bind(this);\n    }\n\n    handleNameChange(e) {\n        this.props.onNameChange(e.target.value);\n    }\n\n    render() {\n        return (\n            <div className=\"Playlist\">\n                <input \n                defaultValue={\"New Playlist\"}\n                onChange={this.handleNameChange}/>\n                <TrackList \n                    tracks={this.props.playlistTracks}\n                    isRemoval={true}\n                    onRemove={this.props.onRemove}\n                    />\n                <button \n                    className=\"Playlist-save\"\n                    onClick={this.props.onSave}>\n                        SAVE TO SPOTIFY\n                </button>\n            </div>\n        )\n    }\n}","import './App.css';\nimport React from 'react';\nimport { SearchResults } from '../../components/searchresults/SearchResults';\nimport { SearchBar } from '../../components/searchbar/SearchBar';\nimport { Playlist } from '../../components/playlist/Playlist';\nimport Spotify from '../../../src/util/Spotify';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchResults: [],\n      playlistName: 'My Playlist',\n      playlistTracks: [],\n    }\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n  addTrack(track) {\n    if (this.state.playlistTracks.find(savedTrack => savedTrack.id === track.id)) \n      { return;\n    } else {\n      let playlist = this.state.playlistTracks.concat(track);\n      this.setState({\n        playlistTracks: playlist,\n      });\n    }}\n\n  removeTrack(track) {\n    let index = this.state.playlistTracks.findIndex(song => {\n      if (song.id === track.id) {\n        return true;\n      } else return false;\n    });\n    if (index !== -1) {\n      let playlist = this.state.playlistTracks;\n      playlist.splice(index, 1);\n      this.setState({\n        playlistTracks: playlist,\n      });\n    }\n  }\n\n  updatePlaylistName(name) {\n    this.setState({\n      playlistName: name,\n    })\n  }\n\n  savePlaylist() {\n    const trackUris = this.state.playlistTracks.map(track => track.uri);\n    Spotify.savePlaylist(this.state.playlistName, trackUris).then(\n      () => {\n        this.setState(\n        {\n          playlistName: 'New Playlist',\n          playlistTracks: [],\n        })\n      });\n    }\n\n  search(term) {\n    Spotify.search(term).then(searchResults => {\n      this.setState({\n        searchResults: searchResults})\n    });\n  }\n\n  render() {\n    return (\n    <div>\n      <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n\n      <div className=\"App\">\n\n        <SearchBar onSearch={this.search}/>\n\n        <div className=\"App-playlist\">\n\n          <SearchResults \n            searchResults={this.state.searchResults}\n            onAdd={this.addTrack}\n          />\n\n          <Playlist \n            onNameChange={this.updatePlaylistName}\n            playlistName={this.state.playlistName} \n            playlistTracks={this.state.playlistTracks}\n            onRemove={this.removeTrack}\n            onSave={this.savePlaylist}\n          />\n\n        </div>\n      </div>\n    </div>\n  );\n}}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}